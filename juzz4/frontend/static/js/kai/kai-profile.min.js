angular.module("kai.profile",[]),angular.module("kai.profile").directive("matchPassword",function(){return{restrict:"A",require:["^ngModel","^form"],link:function(scope,element,attrs,ctrls){var formController=ctrls[1],ngModel=ctrls[0],otherPasswordModel=formController[attrs.matchPassword];ngModel.$validators.passwordMatch=function(modelValue,viewValue){var password=modelValue||viewValue,otherPassword=otherPasswordModel.$modelValue||otherPasswordModel.viewValue;return password===otherPassword}}}}),angular.module("kai.profile").service("ProfileService",["KupOption","UtilsService","KupApiService","$http","AuthTokenFactory",function(KupOption,UtilsService,KupApiService,$http,AuthTokenFactory){var i18n=UtilsService.i18n,notification=UtilsService.notification,ajaxPost=KupApiService.ajaxPost;this.getUserProfile=function(){var param={},onSuccess=function(){},onFail=function(){},onError=function(){};return ajaxPost("getuserprofile",param,onSuccess,onFail,onError)},this.getUserRolesByUserId=function(){var param={"user-id":AuthTokenFactory.getUserId()},onSuccess=function(){},onFail=function(){},onError=function(){};return ajaxPost("getuserrolesbyuserid",param,onSuccess,onFail,onError)},this.updateUserProfile=function(userName,phone,email,fullName,language){var param={"user-name":userName,phone:phone,email:email,name:fullName,language:language},onSuccess=function(){notification("success",i18n("profile-update-success"))},onFail=function(data){notification("error",i18n(data.reason))},onError=function(){notification("error",i18n("server-error"))};return ajaxPost("updateuserprofile",param,onSuccess,onFail,onError)},this.getUserPrefs=function(){var param={},onSuccess=function(){},onFail=function(){},onError=function(){};return ajaxPost("getuserprefs",param,onSuccess,onFail,onError)},this.updateUserPrefs=function(prefs){var param={theme:prefs.theme},onSuccess=function(){notification("success",i18n("general-prefs-update-success"))},onFail=function(data){notification("error",i18n(data.reason))},onError=function(){notification("error",i18n("server-error"))};return ajaxPost("saveuserprefs",param,onSuccess,onFail,onError)},this.changePassword=function(oldPassword,newPassword){var param={"old-password":oldPassword,"new-password":newPassword},onSuccess=function(){notification("success",i18n("password-reset-success"))},onFail=function(data){notification("error",i18n(data.reason))},onError=function(){notification("error",i18n("server-error"))};return ajaxPost("changepassword",param,onSuccess,onFail,onError)},this.getUserNotificationPreferences=function(){var param={},onSuccess=function(){},onFail=function(){},onError=function(){};return ajaxPost("getusernotificationprefs",param,onSuccess,onFail,onError)},this.updateUserNotificationPreferences=function(prefs){var param={"prefs-sms-moderate-enabled":prefs.sms.moderate,"prefs-sms-low-enabled":prefs.sms.low,"prefs-screen-moderate-enabled":prefs.onScreen.moderate,"prefs-screen-low-enabled":prefs.onScreen.low,"prefs-mobile-low-enabled":prefs.mobileApp.low,"prefs-email-low-enabled":prefs.email.low,"prefs-email-moderate-enabled":prefs.email.moderate,"prefs-mobile-moderate-enabled":prefs.mobileApp.moderate,"prefs-mobile-critical-enabled":prefs.mobileApp.critical,"prefs-mobile-mess-enabled":prefs.mobileApp.mess,"prefs-email-critical-enabled":prefs.email.critical,"prefs-screen-critical-enabled":prefs.onScreen.critical,"prefs-sms-critical-enabled":prefs.sms.critical},onSuccess=function(){notification("success",i18n("notification-pref-update-success"))},onFail=function(data){notification("error",i18n(data.reason))},onError=function(){notification("error",i18n("server-error"))};return ajaxPost("setusernotificationprefs",param,onSuccess,onFail,onError)},this.getUserMobileDevices=function(){var param={},onSuccess=function(){},onFail=function(){},onError=function(){};return ajaxPost("getusermobiledevices",param,onSuccess,onFail,onError)},this.unlinkUserMobileDevice=function(identifier){var param={identifier:identifier},onSuccess=function(){notification("success",i18n("mobile-device-unlink-success"))},onFail=function(data){notification("error",i18n(data.reason))},onError=function(){notification("error",i18n("server-error"))};return ajaxPost("removemobiledeviceofuser",param,onSuccess,onFail,onError)},this.getUserNotificationSettings=function(){var param={},onSuccess=function(){},onFail=function(){},onError=function(){};return ajaxPost("getusernotificationsettings",param,onSuccess,onFail,onError)},this.updateUserNotificationSettings=function(eventType,notifyMethods){var param={"event-type":eventType,"notify-methods":angular.toJson(notifyMethods)},onSuccess=function(){},onFail=function(data){},onError=function(){};return ajaxPost("updateusernotificationsettings",param,onSuccess,onFail,onError)},this.getAllowedNotifyMethods=function(){var param={},onSuccess=function(){},onFail=function(){},onError=function(){};return ajaxPost("getallowednotifymethods",param,onSuccess,onFail,onError)}}]),angular.module("kai.profile").controller("ProfileController",["KupOption","UtilsService","ProfileService","AuthTokenFactory","_","$log","$scope","$translate","$q","$timeout","$filter",function(KupOption,UtilsService,ProfileService,AuthTokenFactory,_,$log,$scope,$translate,$q,$timeout,$filter){function init(){var promise=function(){var dfd=$q.defer();return $timeout(function(){dfd.resolve()},1e3),dfd.promise};mainCtrl.block.promise=promise()}var getUserRolesByUserId,getUserProfile,getUserPrefs,getUserMobileDevices,getAllowedNotifyMethods,kupOpt=KupOption,i18n=UtilsService.i18n,notification=UtilsService.notification,indexCtrl=$scope.$parent.$parent.indexCtrl,mainCtrl=$scope.$parent.mainCtrl,profileCtrl=this;profileCtrl.ngMessageUrl=KupOption.sysNgMessageUrl,function(){profileCtrl.company=AuthTokenFactory.getBucket(),profileCtrl.languages=function(){var list=[];return $.each(KupOption.language,function(i,lang){list.push(lang),list[i].text=i18n(lang.text)}),list}(),getUserRolesByUserId=ProfileService.getUserRolesByUserId().success(function(data){if("ok"===data.result){var tmpAry=[];$.each(data.roles,function(i,info){tmpAry.push(info.name)}),profileCtrl.role=tmpAry.join(", ")}}),getUserProfile=ProfileService.getUserProfile().success(function(data){"ok"===data.result&&(profileCtrl.fullName=data.name,profileCtrl.email=data.email,profileCtrl.phone=data.phone,profileCtrl.userName=data["user-name"],profileCtrl.language=_.where(profileCtrl.languages,{value:data.language})[0])}),profileCtrl.submitProfileBasicForm=function(isValid){isValid&&ProfileService.updateUserProfile(profileCtrl.userName,profileCtrl.phone,profileCtrl.email,profileCtrl.fullName,profileCtrl.language.value).success(function(){indexCtrl.currentLanguage=profileCtrl.language.value})}}(),function(){profileCtrl.themes=function(){var list=[];return $.each(KupOption.theme,function(i,theme){list.push(theme),list[i].text=i18n(theme.text)}),list}(),getUserPrefs=ProfileService.getUserPrefs().success(function(data){"ok"===data.result&&(profileCtrl.prefs=data.prefs,profileCtrl.selectedTheme=_.where(profileCtrl.themes,{value:profileCtrl.prefs.theme})[0])}),profileCtrl.submitGeneralPreferencesForm=function(isValid){isValid&&(profileCtrl.prefs.theme=profileCtrl.selectedTheme.value,ProfileService.updateUserPrefs(profileCtrl.prefs).success(function(data){"ok"===data.result&&(indexCtrl.currentTheme=profileCtrl.prefs.theme)}))}}(),function(){profileCtrl.submitProfilePasswordResetForm=function(isValid){isValid&&ProfileService.changePassword(profileCtrl.currentPassword,profileCtrl.newPassword)}}(),function(){profileCtrl.formData=[],profileCtrl.receiveWeeklySummaryEmail=!0,getAllowedNotifyMethods=ProfileService.getAllowedNotifyMethods().success(function(data){"ok"===data.result?profileCtrl.notifyMethods=data.methods:profileCtrl.notifyMethods=[],getUserNotificationSettings=ProfileService.getUserNotificationSettings().success(function(data){if("ok"===data.result){var tmpObj={};$.each(data.settings,function(event,typeList){tmpObj[event]={},$.each(profileCtrl.notifyMethods,function(i,type){tmpObj[event][type]=!1}),$.each(typeList,function(i,type){tmpObj[event][type]=!0})}),$.each(kupOpt.eventType,function(i,eventType){$.each(tmpObj,function(event,typeInfo){if(eventType!==event)return!0;var tmpObj={event:event,typeInfo:typeInfo};profileCtrl.formData.push(tmpObj)})})}})}),profileCtrl.submitProfileNotificationPreferencesForm=function(isValid){var requestList=function(){var request=[];return $.each(profileCtrl.formData,function(i,info){var event=info.event,typeList=info.typeInfo,notifyMethods=[];$.each(typeList,function(type,isActive){isActive&&notifyMethods.push(type)}),request.push(ProfileService.updateUserNotificationSettings(event,notifyMethods))}),request}();isValid&&$q.all(requestList).then(function(){notification("success",i18n("notification-setting-update-success"))},function(){notification("error",i18n("server-error"))})}}(),function(){getUserMobileDevices=ProfileService.getUserMobileDevices().success(function(data){"ok"===data.result&&(profileCtrl.mobileDevices=data.mobileDevices)}),profileCtrl.updateProfileMobileDevicesForm=function(isValid){isValid&&angular.forEach(profileCtrl.mobileDevices,function(mobile){mobile.unlink&&ProfileService.unlinkUserMobileDevice(mobile.identifier).then(function(){ProfileService.getUserMobileDevices().success(function(data){"ok"===data.result&&(profileCtrl.mobileDevices=data.mobileDevices)}),mobile.unlink=!1})})}}(),init()}]);