/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.vca.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TVcaInfo implements org.apache.thrift.TBase<TVcaInfo, TVcaInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TVcaInfo");

  private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CORE_DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("coreDeviceId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SETTINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("settings", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RECURRENCE_RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("recurrenceRule", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("enabled", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TVcaInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TVcaInfoTupleSchemeFactory());
  }

  private String instanceId; // required
  private String appId; // required
  private String coreDeviceId; // required
  private String channelId; // required
  private String settings; // required
  private String recurrenceRule; // required
  private boolean enabled; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSTANCE_ID((short)1, "instanceId"),
    APP_ID((short)2, "appId"),
    CORE_DEVICE_ID((short)3, "coreDeviceId"),
    CHANNEL_ID((short)4, "channelId"),
    SETTINGS((short)5, "settings"),
    RECURRENCE_RULE((short)6, "recurrenceRule"),
    ENABLED((short)7, "enabled");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTANCE_ID
          return INSTANCE_ID;
        case 2: // APP_ID
          return APP_ID;
        case 3: // CORE_DEVICE_ID
          return CORE_DEVICE_ID;
        case 4: // CHANNEL_ID
          return CHANNEL_ID;
        case 5: // SETTINGS
          return SETTINGS;
        case 6: // RECURRENCE_RULE
          return RECURRENCE_RULE;
        case 7: // ENABLED
          return ENABLED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ENABLED_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CORE_DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("coreDeviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTINGS, new org.apache.thrift.meta_data.FieldMetaData("settings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECURRENCE_RULE, new org.apache.thrift.meta_data.FieldMetaData("recurrenceRule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENABLED, new org.apache.thrift.meta_data.FieldMetaData("enabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TVcaInfo.class, metaDataMap);
  }

  public TVcaInfo() {
  }

  public TVcaInfo(
    String instanceId,
    String appId,
    String coreDeviceId,
    String channelId,
    String settings,
    String recurrenceRule,
    boolean enabled)
  {
    this();
    this.instanceId = instanceId;
    this.appId = appId;
    this.coreDeviceId = coreDeviceId;
    this.channelId = channelId;
    this.settings = settings;
    this.recurrenceRule = recurrenceRule;
    this.enabled = enabled;
    setEnabledIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TVcaInfo(TVcaInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetInstanceId()) {
      this.instanceId = other.instanceId;
    }
    if (other.isSetAppId()) {
      this.appId = other.appId;
    }
    if (other.isSetCoreDeviceId()) {
      this.coreDeviceId = other.coreDeviceId;
    }
    if (other.isSetChannelId()) {
      this.channelId = other.channelId;
    }
    if (other.isSetSettings()) {
      this.settings = other.settings;
    }
    if (other.isSetRecurrenceRule()) {
      this.recurrenceRule = other.recurrenceRule;
    }
    this.enabled = other.enabled;
  }

  public TVcaInfo deepCopy() {
    return new TVcaInfo(this);
  }

  @Override
  public void clear() {
    this.instanceId = null;
    this.appId = null;
    this.coreDeviceId = null;
    this.channelId = null;
    this.settings = null;
    this.recurrenceRule = null;
    setEnabledIsSet(false);
    this.enabled = false;
  }

  public String getInstanceId() {
    return this.instanceId;
  }

  public TVcaInfo setInstanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  public void unsetInstanceId() {
    this.instanceId = null;
  }

  /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceId() {
    return this.instanceId != null;
  }

  public void setInstanceIdIsSet(boolean value) {
    if (!value) {
      this.instanceId = null;
    }
  }

  public String getAppId() {
    return this.appId;
  }

  public TVcaInfo setAppId(String appId) {
    this.appId = appId;
    return this;
  }

  public void unsetAppId() {
    this.appId = null;
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return this.appId != null;
  }

  public void setAppIdIsSet(boolean value) {
    if (!value) {
      this.appId = null;
    }
  }

  public String getCoreDeviceId() {
    return this.coreDeviceId;
  }

  public TVcaInfo setCoreDeviceId(String coreDeviceId) {
    this.coreDeviceId = coreDeviceId;
    return this;
  }

  public void unsetCoreDeviceId() {
    this.coreDeviceId = null;
  }

  /** Returns true if field coreDeviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetCoreDeviceId() {
    return this.coreDeviceId != null;
  }

  public void setCoreDeviceIdIsSet(boolean value) {
    if (!value) {
      this.coreDeviceId = null;
    }
  }

  public String getChannelId() {
    return this.channelId;
  }

  public TVcaInfo setChannelId(String channelId) {
    this.channelId = channelId;
    return this;
  }

  public void unsetChannelId() {
    this.channelId = null;
  }

  /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelId() {
    return this.channelId != null;
  }

  public void setChannelIdIsSet(boolean value) {
    if (!value) {
      this.channelId = null;
    }
  }

  public String getSettings() {
    return this.settings;
  }

  public TVcaInfo setSettings(String settings) {
    this.settings = settings;
    return this;
  }

  public void unsetSettings() {
    this.settings = null;
  }

  /** Returns true if field settings is set (has been assigned a value) and false otherwise */
  public boolean isSetSettings() {
    return this.settings != null;
  }

  public void setSettingsIsSet(boolean value) {
    if (!value) {
      this.settings = null;
    }
  }

  public String getRecurrenceRule() {
    return this.recurrenceRule;
  }

  public TVcaInfo setRecurrenceRule(String recurrenceRule) {
    this.recurrenceRule = recurrenceRule;
    return this;
  }

  public void unsetRecurrenceRule() {
    this.recurrenceRule = null;
  }

  /** Returns true if field recurrenceRule is set (has been assigned a value) and false otherwise */
  public boolean isSetRecurrenceRule() {
    return this.recurrenceRule != null;
  }

  public void setRecurrenceRuleIsSet(boolean value) {
    if (!value) {
      this.recurrenceRule = null;
    }
  }

  public boolean isEnabled() {
    return this.enabled;
  }

  public TVcaInfo setEnabled(boolean enabled) {
    this.enabled = enabled;
    setEnabledIsSet(true);
    return this;
  }

  public void unsetEnabled() {
    __isset_bit_vector.clear(__ENABLED_ISSET_ID);
  }

  /** Returns true if field enabled is set (has been assigned a value) and false otherwise */
  public boolean isSetEnabled() {
    return __isset_bit_vector.get(__ENABLED_ISSET_ID);
  }

  public void setEnabledIsSet(boolean value) {
    __isset_bit_vector.set(__ENABLED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSTANCE_ID:
      if (value == null) {
        unsetInstanceId();
      } else {
        setInstanceId((String)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((String)value);
      }
      break;

    case CORE_DEVICE_ID:
      if (value == null) {
        unsetCoreDeviceId();
      } else {
        setCoreDeviceId((String)value);
      }
      break;

    case CHANNEL_ID:
      if (value == null) {
        unsetChannelId();
      } else {
        setChannelId((String)value);
      }
      break;

    case SETTINGS:
      if (value == null) {
        unsetSettings();
      } else {
        setSettings((String)value);
      }
      break;

    case RECURRENCE_RULE:
      if (value == null) {
        unsetRecurrenceRule();
      } else {
        setRecurrenceRule((String)value);
      }
      break;

    case ENABLED:
      if (value == null) {
        unsetEnabled();
      } else {
        setEnabled((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTANCE_ID:
      return getInstanceId();

    case APP_ID:
      return getAppId();

    case CORE_DEVICE_ID:
      return getCoreDeviceId();

    case CHANNEL_ID:
      return getChannelId();

    case SETTINGS:
      return getSettings();

    case RECURRENCE_RULE:
      return getRecurrenceRule();

    case ENABLED:
      return Boolean.valueOf(isEnabled());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSTANCE_ID:
      return isSetInstanceId();
    case APP_ID:
      return isSetAppId();
    case CORE_DEVICE_ID:
      return isSetCoreDeviceId();
    case CHANNEL_ID:
      return isSetChannelId();
    case SETTINGS:
      return isSetSettings();
    case RECURRENCE_RULE:
      return isSetRecurrenceRule();
    case ENABLED:
      return isSetEnabled();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TVcaInfo)
      return this.equals((TVcaInfo)that);
    return false;
  }

  public boolean equals(TVcaInfo that) {
    if (that == null)
      return false;

    boolean this_present_instanceId = true && this.isSetInstanceId();
    boolean that_present_instanceId = true && that.isSetInstanceId();
    if (this_present_instanceId || that_present_instanceId) {
      if (!(this_present_instanceId && that_present_instanceId))
        return false;
      if (!this.instanceId.equals(that.instanceId))
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (!this.appId.equals(that.appId))
        return false;
    }

    boolean this_present_coreDeviceId = true && this.isSetCoreDeviceId();
    boolean that_present_coreDeviceId = true && that.isSetCoreDeviceId();
    if (this_present_coreDeviceId || that_present_coreDeviceId) {
      if (!(this_present_coreDeviceId && that_present_coreDeviceId))
        return false;
      if (!this.coreDeviceId.equals(that.coreDeviceId))
        return false;
    }

    boolean this_present_channelId = true && this.isSetChannelId();
    boolean that_present_channelId = true && that.isSetChannelId();
    if (this_present_channelId || that_present_channelId) {
      if (!(this_present_channelId && that_present_channelId))
        return false;
      if (!this.channelId.equals(that.channelId))
        return false;
    }

    boolean this_present_settings = true && this.isSetSettings();
    boolean that_present_settings = true && that.isSetSettings();
    if (this_present_settings || that_present_settings) {
      if (!(this_present_settings && that_present_settings))
        return false;
      if (!this.settings.equals(that.settings))
        return false;
    }

    boolean this_present_recurrenceRule = true && this.isSetRecurrenceRule();
    boolean that_present_recurrenceRule = true && that.isSetRecurrenceRule();
    if (this_present_recurrenceRule || that_present_recurrenceRule) {
      if (!(this_present_recurrenceRule && that_present_recurrenceRule))
        return false;
      if (!this.recurrenceRule.equals(that.recurrenceRule))
        return false;
    }

    boolean this_present_enabled = true;
    boolean that_present_enabled = true;
    if (this_present_enabled || that_present_enabled) {
      if (!(this_present_enabled && that_present_enabled))
        return false;
      if (this.enabled != that.enabled)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TVcaInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TVcaInfo typedOther = (TVcaInfo)other;

    lastComparison = Boolean.valueOf(isSetInstanceId()).compareTo(typedOther.isSetInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, typedOther.instanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoreDeviceId()).compareTo(typedOther.isSetCoreDeviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoreDeviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreDeviceId, typedOther.coreDeviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(typedOther.isSetChannelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, typedOther.channelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettings()).compareTo(typedOther.isSetSettings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settings, typedOther.settings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecurrenceRule()).compareTo(typedOther.isSetRecurrenceRule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecurrenceRule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recurrenceRule, typedOther.recurrenceRule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnabled()).compareTo(typedOther.isSetEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enabled, typedOther.enabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TVcaInfo(");
    boolean first = true;

    sb.append("instanceId:");
    if (this.instanceId == null) {
      sb.append("null");
    } else {
      sb.append(this.instanceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appId:");
    if (this.appId == null) {
      sb.append("null");
    } else {
      sb.append(this.appId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("coreDeviceId:");
    if (this.coreDeviceId == null) {
      sb.append("null");
    } else {
      sb.append(this.coreDeviceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelId:");
    if (this.channelId == null) {
      sb.append("null");
    } else {
      sb.append(this.channelId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settings:");
    if (this.settings == null) {
      sb.append("null");
    } else {
      sb.append(this.settings);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recurrenceRule:");
    if (this.recurrenceRule == null) {
      sb.append("null");
    } else {
      sb.append(this.recurrenceRule);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("enabled:");
    sb.append(this.enabled);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TVcaInfoStandardSchemeFactory implements SchemeFactory {
    public TVcaInfoStandardScheme getScheme() {
      return new TVcaInfoStandardScheme();
    }
  }

  private static class TVcaInfoStandardScheme extends StandardScheme<TVcaInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TVcaInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instanceId = iprot.readString();
              struct.setInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appId = iprot.readString();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CORE_DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.coreDeviceId = iprot.readString();
              struct.setCoreDeviceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHANNEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelId = iprot.readString();
              struct.setChannelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SETTINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settings = iprot.readString();
              struct.setSettingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RECURRENCE_RULE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recurrenceRule = iprot.readString();
              struct.setRecurrenceRuleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enabled = iprot.readBool();
              struct.setEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TVcaInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.instanceId != null) {
        oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
        oprot.writeString(struct.instanceId);
        oprot.writeFieldEnd();
      }
      if (struct.appId != null) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeString(struct.appId);
        oprot.writeFieldEnd();
      }
      if (struct.coreDeviceId != null) {
        oprot.writeFieldBegin(CORE_DEVICE_ID_FIELD_DESC);
        oprot.writeString(struct.coreDeviceId);
        oprot.writeFieldEnd();
      }
      if (struct.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(struct.channelId);
        oprot.writeFieldEnd();
      }
      if (struct.settings != null) {
        oprot.writeFieldBegin(SETTINGS_FIELD_DESC);
        oprot.writeString(struct.settings);
        oprot.writeFieldEnd();
      }
      if (struct.recurrenceRule != null) {
        oprot.writeFieldBegin(RECURRENCE_RULE_FIELD_DESC);
        oprot.writeString(struct.recurrenceRule);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ENABLED_FIELD_DESC);
      oprot.writeBool(struct.enabled);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TVcaInfoTupleSchemeFactory implements SchemeFactory {
    public TVcaInfoTupleScheme getScheme() {
      return new TVcaInfoTupleScheme();
    }
  }

  private static class TVcaInfoTupleScheme extends TupleScheme<TVcaInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TVcaInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInstanceId()) {
        optionals.set(0);
      }
      if (struct.isSetAppId()) {
        optionals.set(1);
      }
      if (struct.isSetCoreDeviceId()) {
        optionals.set(2);
      }
      if (struct.isSetChannelId()) {
        optionals.set(3);
      }
      if (struct.isSetSettings()) {
        optionals.set(4);
      }
      if (struct.isSetRecurrenceRule()) {
        optionals.set(5);
      }
      if (struct.isSetEnabled()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetInstanceId()) {
        oprot.writeString(struct.instanceId);
      }
      if (struct.isSetAppId()) {
        oprot.writeString(struct.appId);
      }
      if (struct.isSetCoreDeviceId()) {
        oprot.writeString(struct.coreDeviceId);
      }
      if (struct.isSetChannelId()) {
        oprot.writeString(struct.channelId);
      }
      if (struct.isSetSettings()) {
        oprot.writeString(struct.settings);
      }
      if (struct.isSetRecurrenceRule()) {
        oprot.writeString(struct.recurrenceRule);
      }
      if (struct.isSetEnabled()) {
        oprot.writeBool(struct.enabled);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TVcaInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.instanceId = iprot.readString();
        struct.setInstanceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.appId = iprot.readString();
        struct.setAppIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.coreDeviceId = iprot.readString();
        struct.setCoreDeviceIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.channelId = iprot.readString();
        struct.setChannelIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.settings = iprot.readString();
        struct.setSettingsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.recurrenceRule = iprot.readString();
        struct.setRecurrenceRuleIsSet(true);
      }
      if (incoming.get(6)) {
        struct.enabled = iprot.readBool();
        struct.setEnabledIsSet(true);
      }
    }
  }

}

