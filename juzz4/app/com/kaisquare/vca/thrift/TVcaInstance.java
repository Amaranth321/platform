/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.vca.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TVcaInstance implements org.apache.thrift.TBase<TVcaInstance, TVcaInstance._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TVcaInstance");

  private static final org.apache.thrift.protocol.TField VCA_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("vcaInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField RELEASE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("releaseNumber", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField UPDATE_REQUIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("updateRequired", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField VCA_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("vcaStatus", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TVcaInstanceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TVcaInstanceTupleSchemeFactory());
  }

  private TVcaInfo vcaInfo; // required
  private double releaseNumber; // required
  private boolean updateRequired; // required
  private String vcaStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VCA_INFO((short)1, "vcaInfo"),
    RELEASE_NUMBER((short)2, "releaseNumber"),
    UPDATE_REQUIRED((short)3, "updateRequired"),
    VCA_STATUS((short)4, "vcaStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VCA_INFO
          return VCA_INFO;
        case 2: // RELEASE_NUMBER
          return RELEASE_NUMBER;
        case 3: // UPDATE_REQUIRED
          return UPDATE_REQUIRED;
        case 4: // VCA_STATUS
          return VCA_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RELEASENUMBER_ISSET_ID = 0;
  private static final int __UPDATEREQUIRED_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VCA_INFO, new org.apache.thrift.meta_data.FieldMetaData("vcaInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TVcaInfo.class)));
    tmpMap.put(_Fields.RELEASE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("releaseNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UPDATE_REQUIRED, new org.apache.thrift.meta_data.FieldMetaData("updateRequired", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.VCA_STATUS, new org.apache.thrift.meta_data.FieldMetaData("vcaStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TVcaInstance.class, metaDataMap);
  }

  public TVcaInstance() {
  }

  public TVcaInstance(
    TVcaInfo vcaInfo,
    double releaseNumber,
    boolean updateRequired,
    String vcaStatus)
  {
    this();
    this.vcaInfo = vcaInfo;
    this.releaseNumber = releaseNumber;
    setReleaseNumberIsSet(true);
    this.updateRequired = updateRequired;
    setUpdateRequiredIsSet(true);
    this.vcaStatus = vcaStatus;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TVcaInstance(TVcaInstance other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetVcaInfo()) {
      this.vcaInfo = new TVcaInfo(other.vcaInfo);
    }
    this.releaseNumber = other.releaseNumber;
    this.updateRequired = other.updateRequired;
    if (other.isSetVcaStatus()) {
      this.vcaStatus = other.vcaStatus;
    }
  }

  public TVcaInstance deepCopy() {
    return new TVcaInstance(this);
  }

  @Override
  public void clear() {
    this.vcaInfo = null;
    setReleaseNumberIsSet(false);
    this.releaseNumber = 0.0;
    setUpdateRequiredIsSet(false);
    this.updateRequired = false;
    this.vcaStatus = null;
  }

  public TVcaInfo getVcaInfo() {
    return this.vcaInfo;
  }

  public TVcaInstance setVcaInfo(TVcaInfo vcaInfo) {
    this.vcaInfo = vcaInfo;
    return this;
  }

  public void unsetVcaInfo() {
    this.vcaInfo = null;
  }

  /** Returns true if field vcaInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetVcaInfo() {
    return this.vcaInfo != null;
  }

  public void setVcaInfoIsSet(boolean value) {
    if (!value) {
      this.vcaInfo = null;
    }
  }

  public double getReleaseNumber() {
    return this.releaseNumber;
  }

  public TVcaInstance setReleaseNumber(double releaseNumber) {
    this.releaseNumber = releaseNumber;
    setReleaseNumberIsSet(true);
    return this;
  }

  public void unsetReleaseNumber() {
    __isset_bit_vector.clear(__RELEASENUMBER_ISSET_ID);
  }

  /** Returns true if field releaseNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetReleaseNumber() {
    return __isset_bit_vector.get(__RELEASENUMBER_ISSET_ID);
  }

  public void setReleaseNumberIsSet(boolean value) {
    __isset_bit_vector.set(__RELEASENUMBER_ISSET_ID, value);
  }

  public boolean isUpdateRequired() {
    return this.updateRequired;
  }

  public TVcaInstance setUpdateRequired(boolean updateRequired) {
    this.updateRequired = updateRequired;
    setUpdateRequiredIsSet(true);
    return this;
  }

  public void unsetUpdateRequired() {
    __isset_bit_vector.clear(__UPDATEREQUIRED_ISSET_ID);
  }

  /** Returns true if field updateRequired is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateRequired() {
    return __isset_bit_vector.get(__UPDATEREQUIRED_ISSET_ID);
  }

  public void setUpdateRequiredIsSet(boolean value) {
    __isset_bit_vector.set(__UPDATEREQUIRED_ISSET_ID, value);
  }

  public String getVcaStatus() {
    return this.vcaStatus;
  }

  public TVcaInstance setVcaStatus(String vcaStatus) {
    this.vcaStatus = vcaStatus;
    return this;
  }

  public void unsetVcaStatus() {
    this.vcaStatus = null;
  }

  /** Returns true if field vcaStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetVcaStatus() {
    return this.vcaStatus != null;
  }

  public void setVcaStatusIsSet(boolean value) {
    if (!value) {
      this.vcaStatus = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VCA_INFO:
      if (value == null) {
        unsetVcaInfo();
      } else {
        setVcaInfo((TVcaInfo)value);
      }
      break;

    case RELEASE_NUMBER:
      if (value == null) {
        unsetReleaseNumber();
      } else {
        setReleaseNumber((Double)value);
      }
      break;

    case UPDATE_REQUIRED:
      if (value == null) {
        unsetUpdateRequired();
      } else {
        setUpdateRequired((Boolean)value);
      }
      break;

    case VCA_STATUS:
      if (value == null) {
        unsetVcaStatus();
      } else {
        setVcaStatus((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VCA_INFO:
      return getVcaInfo();

    case RELEASE_NUMBER:
      return Double.valueOf(getReleaseNumber());

    case UPDATE_REQUIRED:
      return Boolean.valueOf(isUpdateRequired());

    case VCA_STATUS:
      return getVcaStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VCA_INFO:
      return isSetVcaInfo();
    case RELEASE_NUMBER:
      return isSetReleaseNumber();
    case UPDATE_REQUIRED:
      return isSetUpdateRequired();
    case VCA_STATUS:
      return isSetVcaStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TVcaInstance)
      return this.equals((TVcaInstance)that);
    return false;
  }

  public boolean equals(TVcaInstance that) {
    if (that == null)
      return false;

    boolean this_present_vcaInfo = true && this.isSetVcaInfo();
    boolean that_present_vcaInfo = true && that.isSetVcaInfo();
    if (this_present_vcaInfo || that_present_vcaInfo) {
      if (!(this_present_vcaInfo && that_present_vcaInfo))
        return false;
      if (!this.vcaInfo.equals(that.vcaInfo))
        return false;
    }

    boolean this_present_releaseNumber = true;
    boolean that_present_releaseNumber = true;
    if (this_present_releaseNumber || that_present_releaseNumber) {
      if (!(this_present_releaseNumber && that_present_releaseNumber))
        return false;
      if (this.releaseNumber != that.releaseNumber)
        return false;
    }

    boolean this_present_updateRequired = true;
    boolean that_present_updateRequired = true;
    if (this_present_updateRequired || that_present_updateRequired) {
      if (!(this_present_updateRequired && that_present_updateRequired))
        return false;
      if (this.updateRequired != that.updateRequired)
        return false;
    }

    boolean this_present_vcaStatus = true && this.isSetVcaStatus();
    boolean that_present_vcaStatus = true && that.isSetVcaStatus();
    if (this_present_vcaStatus || that_present_vcaStatus) {
      if (!(this_present_vcaStatus && that_present_vcaStatus))
        return false;
      if (!this.vcaStatus.equals(that.vcaStatus))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TVcaInstance other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TVcaInstance typedOther = (TVcaInstance)other;

    lastComparison = Boolean.valueOf(isSetVcaInfo()).compareTo(typedOther.isSetVcaInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVcaInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vcaInfo, typedOther.vcaInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReleaseNumber()).compareTo(typedOther.isSetReleaseNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReleaseNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.releaseNumber, typedOther.releaseNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateRequired()).compareTo(typedOther.isSetUpdateRequired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateRequired()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateRequired, typedOther.updateRequired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVcaStatus()).compareTo(typedOther.isSetVcaStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVcaStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vcaStatus, typedOther.vcaStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TVcaInstance(");
    boolean first = true;

    sb.append("vcaInfo:");
    if (this.vcaInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.vcaInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("releaseNumber:");
    sb.append(this.releaseNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateRequired:");
    sb.append(this.updateRequired);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vcaStatus:");
    if (this.vcaStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.vcaStatus);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TVcaInstanceStandardSchemeFactory implements SchemeFactory {
    public TVcaInstanceStandardScheme getScheme() {
      return new TVcaInstanceStandardScheme();
    }
  }

  private static class TVcaInstanceStandardScheme extends StandardScheme<TVcaInstance> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TVcaInstance struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VCA_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.vcaInfo = new TVcaInfo();
              struct.vcaInfo.read(iprot);
              struct.setVcaInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RELEASE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.releaseNumber = iprot.readDouble();
              struct.setReleaseNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UPDATE_REQUIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.updateRequired = iprot.readBool();
              struct.setUpdateRequiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VCA_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vcaStatus = iprot.readString();
              struct.setVcaStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TVcaInstance struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.vcaInfo != null) {
        oprot.writeFieldBegin(VCA_INFO_FIELD_DESC);
        struct.vcaInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RELEASE_NUMBER_FIELD_DESC);
      oprot.writeDouble(struct.releaseNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_REQUIRED_FIELD_DESC);
      oprot.writeBool(struct.updateRequired);
      oprot.writeFieldEnd();
      if (struct.vcaStatus != null) {
        oprot.writeFieldBegin(VCA_STATUS_FIELD_DESC);
        oprot.writeString(struct.vcaStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TVcaInstanceTupleSchemeFactory implements SchemeFactory {
    public TVcaInstanceTupleScheme getScheme() {
      return new TVcaInstanceTupleScheme();
    }
  }

  private static class TVcaInstanceTupleScheme extends TupleScheme<TVcaInstance> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TVcaInstance struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVcaInfo()) {
        optionals.set(0);
      }
      if (struct.isSetReleaseNumber()) {
        optionals.set(1);
      }
      if (struct.isSetUpdateRequired()) {
        optionals.set(2);
      }
      if (struct.isSetVcaStatus()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetVcaInfo()) {
        struct.vcaInfo.write(oprot);
      }
      if (struct.isSetReleaseNumber()) {
        oprot.writeDouble(struct.releaseNumber);
      }
      if (struct.isSetUpdateRequired()) {
        oprot.writeBool(struct.updateRequired);
      }
      if (struct.isSetVcaStatus()) {
        oprot.writeString(struct.vcaStatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TVcaInstance struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.vcaInfo = new TVcaInfo();
        struct.vcaInfo.read(iprot);
        struct.setVcaInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.releaseNumber = iprot.readDouble();
        struct.setReleaseNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.updateRequired = iprot.readBool();
        struct.setUpdateRequiredIsSet(true);
      }
      if (incoming.get(3)) {
        struct.vcaStatus = iprot.readString();
        struct.setVcaStatusIsSet(true);
      }
    }
  }

}

